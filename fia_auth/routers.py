"""
Module containing the fastapi routers
"""

from __future__ import annotations

import os
from typing import Annotated, Any, Literal

from fastapi import APIRouter, Cookie, Depends, HTTPException
from fastapi.security import HTTPAuthorizationCredentials, HTTPBearer
from starlette.responses import JSONResponse

from fia_auth.auth import authenticate
from fia_auth.exceptions import UOWSError
from fia_auth.experiments import get_experiments_for_user_number
from fia_auth.model import UserCredentials  # noqa: TCH001   # Required for fastapi
from fia_auth.tokens import generate_access_token, generate_refresh_token, load_access_token, load_refresh_token

ROUTER = APIRouter()

security = HTTPBearer(scheme_name="APIKey", description="API Key for internal routes")

API_KEY = os.environ.get("API_KEY", "shh")


@ROUTER.get("/experiments", tags=["internal"])
async def get_experiments(
    user_number: int, credentials: Annotated[HTTPAuthorizationCredentials, Depends(security)]
) -> list[int]:
    """
    Get the experiment (RB) numbers for the given user number provided by query string parameter

    \f
    :param user_number: The user number
    :param credentials: The API Key
    :return: A list of experiment (RB) Numbers for the given user
    """
    if credentials.credentials != API_KEY:
        raise HTTPException(status_code=403, detail="Forbidden")
    return await get_experiments_for_user_number(user_number)


@ROUTER.post("/api/jwt/authenticate", tags=["auth"])
async def login(credentials: UserCredentials) -> JSONResponse:
    """
    Login with facilities account
    \f
    :param credentials: username and password
    :return: JSON Response for access token and cookie set for refresh token
    """
    try:
        user_number = authenticate(credentials)
        refresh_token = generate_refresh_token().jwt
        access_token = generate_access_token(user_number).jwt
        response = JSONResponse(content={"token": access_token}, status_code=200)
        response.set_cookie(
            "refresh-token", value=refresh_token, max_age=60 * 60 * 12, secure=True, httponly=True, samesite="lax"
        )  # 12 hours
        return response
    except UOWSError as exc:
        raise HTTPException(status_code=403, detail="Forbidden") from exc


@ROUTER.post("/api/jwt/checkToken")
def verify(token: dict[str, Any]) -> Literal["ok"]:
    """
    Verify an access token was generated by this auth server and has not expired
    \f
    :param token: The JWT
    :return: "OK"
    """
    load_access_token(token["token"]).verify()
    return "ok"


@ROUTER.post("/api/jwt/refresh")
def refresh(token: dict[str, Any], refresh_token: Annotated[str | None, Cookie()] = None) -> JSONResponse:
    """
    Refresh an access token based on a refresh token
    \f
    :param token: The access token to be refreshed
    :return: The new access token
    """
    access_token = load_access_token(token["token"])
    loaded_refresh_token = load_refresh_token(refresh_token)
    loaded_refresh_token.verify()
    access_token.refresh()
    return JSONResponse({"token": access_token.jwt})
